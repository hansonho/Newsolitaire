{"version":3,"sources":["component/Card/CardPost.jsx","component/Card/Card.jsx","component/GameArea/GameArea.jsx","component/FuncArea/FuncArea.jsx","component/Home/Home.jsx","component/App.jsx","serviceWorker.js","index.js"],"names":["CardPost","props","outSide","inside","content","data","react_default","a","createElement","className","data-role","Card","card","color","colorKind","number","keyID","translateY","translateX","id","draggable","concat","key","style","transform","zIndex","GameArea","cardArray","map","index1","e","index2","cardData","split","width","window","innerWidth","Card_Card","Card_CardPost","FuncArea","_useState","useState","_useState2","Object","slicedToArray","time","timeCount","_useState3","_useState4","isRunning","setIsRunning","useEffect","counter","setInterval","clearInterval","Math","floor","type","value","onClick","location","reload","Home","component_GameArea_GameArea","FuncArea_FuncArea","App","react_router_dom","component_Home_Home","Boolean","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73d690ed.chunk.js","sourcesContent":["import React from 'react';\n\nfunction CardPost(props) {\n    const { outSide, inside, content, data } = props;\n    return (\n        <div className={outSide} data-role={data}>\n            <div className={inside}>\n                <span>{content}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default CardPost;\n","import React from 'react';\n\nfunction Card(props) {\n    const { card, color, colorKind, number, keyID, translateY, translateX, data, id } = props;\n    return (\n        <div id={id} draggable=\"true\" data-role={data} className={`${card} ${color}`} key={keyID} style={{ transform: `translate(${translateX}%, ${translateY}px)`, zIndex: keyID }}>\n            <div className=\"upArea\">\n                <span id=\"left\">{number}</span>\n                <span id=\"right\">{colorKind}</span>\n            </div>\n            <div className=\"downArea\">\n                <span>{colorKind}</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport CardPost from '../Card/CardPost';\nimport Card from '../Card/Card';\nimport '../../css/CardPost.css';\nimport '../../css/GameArea.css';\nimport '../../css/Card.css';\n\nfunction GameArea(props) {\n    const { cardArray } = props;\n\n    return (\n        <div className=\"gameArea\">\n            <div className=\"playArea\">\n                <div className=\"playAreaInside\">\n                    {cardArray.map((data, index1) => {\n                        return (\n                            data.map((e, index2) => {\n                                const cardData = e.split(' ');\n                                let color;\n                                let translateY;\n                                let translateX;\n                                const width = window.innerWidth * 0.72 / 8 + 15;\n                                switch (index1) {\n                                case 0:\n                                    translateY = 35 * index2;\n                                    translateX = 0;\n                                    break;\n                                case 1:\n                                    translateY = 35 * index2;\n                                    translateX = width;\n                                    break;\n                                case 2:\n                                    translateY = 35 * index2;\n                                    translateX = width * 2;\n                                    break;\n                                case 3:\n                                    translateY = 35 * index2;\n                                    translateX = width * 3;\n                                    break;\n                                case 4:\n                                    translateY = 35 * index2;\n                                    translateX = width * 4;\n                                    break;\n                                case 5:\n                                    translateY = 35 * index2;\n                                    translateX = width * 5;\n                                    break;\n                                case 6:\n                                    translateY = 35 * index2;\n                                    translateX = width * 6;\n                                    break;\n                                case 7:\n                                    translateY = 35 * index2;\n                                    translateX = width * 7;\n                                    break;\n                                default:\n                                }\n                                switch (cardData[0]) {\n                                case '♠':\n                                    color = 'spade';\n                                    break;\n                                case '♥':\n                                    color = 'heart';\n                                    break;\n                                case '♦':\n                                    color = 'diamond';\n                                    break;\n                                default:\n                                    color = 'club';\n                                    break;\n                                }\n                                return (\n                                    <Card id={`${index1}${index2}`} keyID={index2} card=\"cards\" color={color} colorKind={cardData[0]} number={cardData[1]} translateY={translateY} translateX={translateX} data=\"drag-drop-container\" />\n                                );\n                            })\n                        );\n                    })}\n                </div>\n            </div>\n            <div className=\"waitArea\">\n                <CardPost outSide=\"cardPostOut\" inside=\"cardPost\" data=\"drag-drop-container\" />\n                <CardPost outSide=\"cardPostOut\" inside=\"cardPost\" data=\"drag-drop-container\" />\n                <CardPost outSide=\"cardPostOut\" inside=\"cardPost\" data=\"drag-drop-container\" />\n                <CardPost outSide=\"cardPostOut\" inside=\"cardPost\" data=\"drag-drop-container\" />\n                <CardPost outSide=\"cardFinalOut\" inside=\"cardFinalPost\" content=\"♦\" />\n                <CardPost outSide=\"cardFinalOut\" inside=\"cardFinalPost\" content=\"♣\" />\n                <CardPost outSide=\"cardFinalOut\" inside=\"cardFinalPost\" content=\"♥\" />\n                <CardPost outSide=\"cardFinalOut\" inside=\"cardFinalPost\" content=\"♠\" />\n            </div>\n        </div>\n    );\n}\n\nexport default GameArea;\n","import React, { useState, useEffect } from 'react';\n\nfunction FuncArea() {\n    const [time, timeCount] = useState(0);\n    const [isRunning, setIsRunning] = useState(true);\n    useEffect(() => {\n        if (isRunning) {\n            const counter = setInterval(() => {\n                timeCount(time + 1);\n            }, 1000);\n            return () => clearInterval(counter);\n        }\n    });\n    const status = () => {\n        setIsRunning(!isRunning);\n    };\n    const reStart = () => {\n        window.location.reload();\n    };\n\n    return (\n        <div className=\"funcArea\">\n            <div className=\"time\">\n                <span id=\"timeWord\">TIME</span>\n                <span id=\"timeMath\">{Math.floor(time / 60)}:{time % 60 < 10 ? `0${time % 60}` : time % 60}</span>\n                <input id=\"status\" className=\"funBtn\" type=\"button\" value={isRunning ? 'UNDO' : 'CONTINUE'} onClick={status} />\n            </div>\n            <div className=\"start\">\n                <input className=\"funBtn\" type=\"button\" value=\"RESTART\" onClick={reStart} />\n                <input className=\"funBtn\" type=\"button\" value=\"NEW GAME\" />\n            </div>\n        </div>\n    );\n}\n\nexport default FuncArea;\n","import React from 'react';\n\n// Component\nimport GameArea from '../GameArea/GameArea';\nimport FuncArea from '../FuncArea/FuncArea';\n\n// CSS\nimport '../../css/Home.css';\nimport '../../css/FuncArea.css';\n\nfunction Home() {\n    const cardArray = [['♣ 7', '♥ 3', '♠ J', '♣ 10', '♦ A', '♠ A', '♦ 5'], ['♥ J', '♠ 5', '♠ 3', '♣ 5', '♥ 5', '♠ 2', '♥ A'],\n        ['♦ 7', '♣ 8', '♣ 9', '♦ 8', '♥ Q', '♦ Q', '♠ 6'], ['♣ 2', '♣ 3', '♦ 6', '♠ 9', '♠ 8', '♠ Q', '♥ 6'],\n        ['♦ 4', '♥ 9', '♣ Q', '♠ K', '♥ 10', '♦ 9'], ['♣ 6', '♣ A', '♥ 7', '♦ 3', '♥ 2', '♠ 10'],\n        ['♥ 8', '♠ 7', '♥ K', '♦ 2', '♦ K', '♣ J'], ['♣ K', '♥ 4', '♦ 10', '♦ J', '♣ 4', '♠ 4']];\n    return (\n        <div className=\"Home\">\n            <GameArea cardArray={cardArray} />\n            <FuncArea />\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Home from './Home/Home';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Home />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}